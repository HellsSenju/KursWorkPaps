fq_codel - FQ_Codel (Fair Queuing with Controlled Delay) - это дисциплина очередей, которая объединяет Fair Queuing со схемой Model ACM. FQ_Codel использует стохастическую модель для классификации входящих пакетов на различные потоки и используется для предоставления справедливой доли пропускной способности всем потокам, использующим очередь. Каждый такой поток управляется дисциплиной очередей Code. Упорядочивание внутри потока исключено, поскольку Code внутри использует очередь FIFO.

   1/ limit имеет ту же семантику, что и codel, и является жестким ограничением на реальный размер очереди.  При достижении этого предела входящие пакеты отбрасываются. По умолчанию 10240 пакетов.

   2/ memory_limit устанавливает ограничение на общее количество байт, которые могут быть поставлены в очередь в данном экземпляре FQ-CoDel. Будет применяться меньшее из значений лимита пакетов в параметре limit и лимита памяти. По умолчанию это 32 МБ.

   3/ flows - количество потоков, на которые классифицируются входящие пакеты. Из-за стохастической природы хэширования несколько потоков могут оказаться хэшированными в один и тот же слот.  Более новые потоки имеют приоритет перед более старыми. Этот параметр может быть задан только во время загрузки, поскольку для хэш-таблицы должна быть выделена память.  Значение по умолчанию - 1024.

   4/ target имеет ту же семантику, что и codel, и является допустимой минимальной задержкой в очереди. Эта минимальная задержка определяется путем отслеживания локальной минимальной задержки в очереди, которую испытывают пакеты. Значение по умолчанию - 5 мс.

   5/ interval имеет ту же семантику, что и codel, и используется для того, чтобы измеренная минимальная задержка не стала слишком устаревшей.  Минимальная задержка должна наблюдаться в последнюю эпоху длиной .B интервала.  Это значение должно быть порядка наихудшего RTT через узкое место, чтобы дать конечным точкам достаточно времени для реакции. Значение по умолчанию - 100 мс.

   6/ quantum - количество байт, используемых в качестве "дефицита" в алгоритме справедливой очереди. По умолчанию установлено значение 1514 байт, что соответствует MTU Ethernet плюс длина аппаратного заголовка 14 байт.

   7/ ecn | noecn имеет ту же семантику, что и codel, и может использоваться для пометки пакетов вместо их отбрасывания. Если ecn был включен, noecn может быть использован для его отключения и наоборот. В отличие от codel, ecn включен по умолчанию.

   8/ ce_threshold устанавливает порог, при превышении которого все пакеты помечаются как ECN Congestion Experienced. Это полезно для алгоритмов управления перегрузками в стиле DCTCP, которые требуют маркировки при очень низких порогах очереди.
   
   
CREATE TABLE IF NOT EXISTS public.notification_2
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    process_id uuid NOT NULL,
    information character varying(500) COLLATE pg_catalog."default" NOT NULL,
    error_msg character varying(500) COLLATE pg_catalog."default",
    manager character varying(100) COLLATE pg_catalog."default",
    creation_time timestamp without time zone,
    command character varying(500) COLLATE pg_catalog."default",
    output_ character varying(500) COLLATE pg_catalog."default",
    CONSTRAINT "Notification_2_pkey" PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.notification_2
    OWNER to postgres;
    
    
    CREATE TABLE IF NOT EXISTS public.iperf_statistic
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    process_id uuid NOT NULL,
    interval_ character varying(100) COLLATE pg_catalog."default" NOT NULL,
    transfer character varying(100) COLLATE pg_catalog."default" NOT NULL,
    brandwidth character varying(100) COLLATE pg_catalog."default" NOT NULL,
    jitter character varying(100) COLLATE pg_catalog."default" NOT NULL,
    lost integer NOT NULL,
    total integer NOT NULL,
    lost_total character varying(100) COLLATE pg_catalog."default" NOT NULL,
    creation_time timestamp without time zone NOT NULL,
    CONSTRAINT iperf_statistic_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.iperf_statistic
    OWNER to postgres;
